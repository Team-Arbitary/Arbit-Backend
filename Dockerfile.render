# Render.com optimized Dockerfile
# Multi-stage build for Spring Boot Application

# Stage 1: Build the application
FROM maven:3.9.9-eclipse-temurin-21-alpine AS build

WORKDIR /build

# Copy pom.xml and download dependencies (better layer caching)
COPY app/pom.xml .
RUN mvn dependency:go-offline -B || true

# Copy source code and build
COPY app/src ./src
RUN mvn clean package -DskipTests -B

# Stage 2: Run the application
FROM eclipse-temurin:21-jre-alpine

WORKDIR /app

# Install curl for health checks
RUN apk add --no-cache curl

# Create a non-root user
RUN addgroup -S spring && adduser -S spring -G spring

# Copy the built jar from the build stage
COPY --from=build /build/target/*.jar app.jar

# Change ownership
RUN chown spring:spring app.jar

USER spring:spring

# Render uses PORT environment variable
ENV PORT=10000
EXPOSE ${PORT}

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:${PORT}/transformer-thermal-inspection/actuator/health || exit 1

# Run the application with dynamic port binding
# Render.com provides PORT environment variable
ENTRYPOINT ["sh", "-c", "java -Dserver.port=${PORT:-10000} -Xms256m -Xmx512m -XX:+UseG1GC -jar app.jar"]
